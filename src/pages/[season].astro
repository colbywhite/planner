---
import Root from "../layout/root.astro";
import {TaskService} from "../services/task.service";
import {formatDateForSubtitle, formatDateForTitle} from "../utils";
import NavLink from "../components/NavLink.astro";
import EllipsisMenu from "../components/EllipsisMenu.astro";
const {season: seasonId} = Astro.params
if (!seasonId) {
    throw new Error('no season id')
}
const givenWeek = Astro.url.searchParams.get('week') || undefined;
const taskSvc = new TaskService(Astro.cookies, seasonId);
const [{season, tasks, ...week}, weeks] = await Promise.all([
    taskSvc.safelyGetTasks(Number(givenWeek)),
    taskSvc.getWeeks()
]);
const previousWeek = week.number - 1 < 1 ? undefined : week.number - 1
const nextWeek = week.number + 1 > weeks.length ? undefined : week.number + 1
---
<Root title={season.name}>
    <main class="flex flex-col gap-8 items-center m-4">
        <header class="w-full">
            <p class="text-3xl text-center font-bold">Week {week.number}</p>
            {week.subtitle &&
                    <p class="italic text-center font-light">{week.subtitle}</p>
            }
            <div class="flex flex-row justify-between items-center w-full text-sm">
                {previousWeek
                    ?
                        <NavLink href=`?week=${previousWeek}` class="link link-hover link-primary">&lt;</NavLink>
                    :
                        <div class="text-neutral">&lt;</div>
                }
                <details class="dropdown">
                    <summary class="btn btn-xs btn-ghost">
                        {formatDateForTitle(week.start)} - {formatDateForTitle(week.end)}
                    </summary>
                    <ul class="menu dropdown-content bg-base-300 rounded-box z-[1] w-52 p-2 shadow">
                        {weeks.map(w =>
                                <li>
                                    <NavLink href=`?week=${w.number}` class="link link-hover">
                                        {formatDateForSubtitle(w.start)} - {formatDateForSubtitle(w.end)}
                                    </NavLink>
                                </li>
                        )}
                    </ul>
                </details>
                {nextWeek
                    ?
                        <NavLink href=`?week=${nextWeek}` class="link link-hover link-primary">&gt;</NavLink>
                    :
                        <div class="text-neutral">&gt;</div>
                }
            </div>
        </header>
        {tasks.length < 1 || tasks.every(t => t === null)
            ?
                <p>No tasks yet.</p>
            :
                <ul class="flex flex-col gap-8 w-full">
                    {
                        tasks.map(
                            ({emoji, name, completed, id}) =>
                                    <li hx-include="this" hx-target="this">
                                        <div class="grid grid-cols-[1.5rem_auto_1.5rem] gap-4 items-center">
                                            <input type="checkbox" class="checkbox" checked={completed}
                                                   hx-post="/partials/tasks.toggle"/>
                                            <span class={completed ? 'line-through' : ''}>{emoji} {name}</span>
                                            <EllipsisMenu>
                                                <ul class="menu dropdown-content bg-base-300 rounded-box z-[1] w-16 p-2 shadow gap-4">
                                                    <li class="link link-hover" hx-post="/partials/tasks.edit">edit</li>
                                                    <li class="link link-hover disabled">delete</li>
                                                </ul>
                                            </EllipsisMenu>
                                            <input type="hidden" name="season" value={season.id}/>
                                            <input type="hidden" name="week" value={week.id}/>
                                            <input type="hidden" name="task" value={id}/>
                                            <input type="hidden" name="emoji" value={emoji}/>
                                            <input type="hidden" name="name" value={name}/>
                                        </div>
                                    </li>
                        )
                    }
                </ul>
        }
        <p class="italic link hover:no-underline" hx-include="input[name=week], input[name=season]"
           hx-swap="outerHTML"
           hx-get="/partials/tasks.new">
            Add task
            <input type="hidden" name="week" value={week.id}>
            <input type="hidden" name="season" value={season.id}>
        </p>
    </main>
</Root>
